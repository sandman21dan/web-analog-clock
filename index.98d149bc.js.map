{"mappings":"qBAcgBA,EAAYC,UACR,IAATA,EAAe,YCbjBC,GAAiBC,OACtBA,EAAS,IAAGC,MACZA,EAAQ,EAACC,OACTA,EAAM,SAAU,UAEVC,EAASC,SAASC,cAAa,cACrCF,EAAOG,MAAMC,SAAQ,WACrBJ,EAAOG,MAAME,OAAM,IACnBL,EAAOG,MAAMG,aAAY,MACzBN,EAAOG,MAAMI,OAAM,GAAMV,MACzBG,EAAOG,MAAML,MAAK,GAAMA,MACxBE,EAAOG,MAAMK,gBAAkBT,EAC/BC,EAAOG,MAAMM,gBAAe,gBAErBT,WAGFU,EAAkBC,GAAWd,OAClCA,EAAS,IAAGC,MACZA,EAAQ,EAACC,OACTA,EAAM,OAASa,YACfA,EAAc,IAAE,UAEVC,EAAkBZ,SAASC,cAAa,OAC9CW,EAAgBV,MAAMC,SAAQ,WAC9BS,EAAgBV,MAAME,OAAM,IAC5BQ,EAAgBV,MAAMW,QAAO,OAC7BD,EAAgBV,MAAMY,cAAa,SACnCF,EAAgBV,MAAMa,eAAc,aACpCH,EAAgBV,MAAMI,OAAM,GAAMV,MAClCgB,EAAgBV,MAAML,MAAK,GAAMA,MACjCe,EAAgBV,MAAMM,gBAAe,gBACrCI,EAAgBV,MAAMc,UAAS,UAAaN,cAEtCO,EAASjB,SAASC,cAAa,cACrCgB,EAAOf,MAAMG,aAAY,MACzBY,EAAOf,MAAML,MAAK,OAClBoB,EAAOf,MAAMI,OAAM,GAAMK,KACzBM,EAAOf,MAAMK,gBAAkBT,EAE/Bc,EAAgBM,YAAYD,GAErBL,oBAIDO,EAAYnB,SAASoB,eAAc,gBAErCD,EAAS,CACTA,EAAUjB,MAAMC,SAAQ,mBAEfkB,EAAQ,EAAGA,EAAQ,IAAKA,GAAS,GAAE,KACpCJ,EAGAA,EADAI,EAAQ,IAAO,EACNZ,EAAkBY,EAAK,CAC5BvB,OAAM,UACND,MAAO,EACPc,YAAa,KAGRF,EAAkBY,GAE/BF,EAAUD,YAAYD,OAGtBK,QAEEC,EAAa5B,EAAiB,CAAGC,OAAQ,IAAKC,MAAO,IACrD2B,EAAe7B,IACf8B,EAAe9B,EAAiB,CAAGE,MAAO,EAAGC,OAAM,SAEzDqB,EAAUD,YAAYK,GACtBJ,EAAUD,YAAYM,GACtBL,EAAUD,YAAYO,GAEtBC,aAAW,WACAC,EAAMC,EAAQC,oBD9EvBC,EAAI,IAAOC,YAGbD,EAAKE,WACLF,EAAKG,aACLH,EAAKI,cCyE8BC,GAE3Bb,GAAiBM,IACjBL,EAAWrB,MAAMc,UAAS,mBDxEhBW,UACR,IAAPA,EAAa,GCuE+BS,CAAUT,EAAQC,EAAS,UAClEJ,EAAatB,MAAMc,UAAS,UAAavB,EAAYmC,SACrDN,EAAgBM,GAGpBH,EAAavB,MAAMc,UAAS,UAAavB,EAAYoC,WACtD,MAIXQ","sources":["src/time.ts","src/index.ts"],"sourcesContent":["export function getTimeParts(): [number, number, number] {\n    const time = new Date();\n\n    return [\n        time.getHours(),\n        time.getMinutes(),\n        time.getSeconds(),\n    ]\n}\n\nexport function hourToDeg(hour: number): number {\n    return hour * 360 / 12;\n}\n\nexport function minSecToDeg(minSec: number): number {\n    return minSec * 360 / 60;\n}\n","import { getTimeParts, hourToDeg, minSecToDeg } from \"./time\";\n\nfunction createClockHandle({\n    length = 200,\n    width = 2,\n    colour = 'white'\n} = {}) {\n    const handle = document.createElement('div');\n    handle.style.position = 'absolute';\n    handle.style.bottom = '0';\n    handle.style.borderRadius = '2px';\n    handle.style.height = `${length}px`;\n    handle.style.width = `${width}px`;\n    handle.style.backgroundColor = colour;\n    handle.style.transformOrigin = 'center bottom';\n\n    return handle;\n}\n\nfunction createClockMarker(deg: number, {\n    length = 200,\n    width = 2,\n    colour = 'grey',\n    heightRatio = 20,\n} = {}) {\n    const markerContainer = document.createElement('div');\n    markerContainer.style.position = 'absolute';\n    markerContainer.style.bottom = '0';\n    markerContainer.style.display = 'flex';\n    markerContainer.style.flexDirection = 'column';\n    markerContainer.style.justifyContent = 'flex-start';\n    markerContainer.style.height = `${length}px`;\n    markerContainer.style.width = `${width}px`;\n    markerContainer.style.transformOrigin = 'center bottom';\n    markerContainer.style.transform = `rotate(${deg}deg)`;\n\n    const marker = document.createElement('div');\n    marker.style.borderRadius = '2px';\n    marker.style.width = '100%';\n    marker.style.height = `${heightRatio}%`;\n    marker.style.backgroundColor = colour;\n\n    markerContainer.appendChild(marker);\n\n    return markerContainer;\n}\n\nfunction main() {\n    const container = document.getElementById('container');\n\n    if (container) {\n        container.style.position = 'relative';\n\n        for (let angle = 0; angle < 360; angle += 30) {\n            let marker: HTMLDivElement;\n\n            if (angle % 90 === 0) {\n                marker = createClockMarker(angle, {\n                    colour: '#aaaaaa',\n                    width: 3,\n                    heightRatio: 25,\n                });\n            } else {\n                marker = createClockMarker(angle);\n            }\n            container.appendChild(marker);\n        }\n\n        let currentMinute: number;\n\n        const hourHandle = createClockHandle({ length: 120, width: 3 });\n        const minuteHandle = createClockHandle();\n        const secondHandle = createClockHandle({ width: 1, colour: 'grey'});\n\n        container.appendChild(hourHandle);\n        container.appendChild(minuteHandle);\n        container.appendChild(secondHandle);\n\n        setInterval(() => {\n            const [hour, minute, second] = getTimeParts();\n\n            if (currentMinute != minute) {\n                hourHandle.style.transform = `rotate(${hourToDeg(hour + (minute / 60))}deg)`;\n                minuteHandle.style.transform = `rotate(${minSecToDeg(minute)}deg)`;\n                currentMinute = minute;\n            }\n\n            secondHandle.style.transform = `rotate(${minSecToDeg(second)}deg)`;\n        }, 1000);\n    }\n}\n\nmain();\n"],"names":["$8aad7887c0f66c51fcc23125f45161e4$export$2fc4e4d4bf38ea70","minSec","$fe6805ae6a1acc57369ff96015183e28$var$createClockHandle","length","width","colour","handle","document","createElement","style","position","bottom","borderRadius","height","backgroundColor","transformOrigin","$fe6805ae6a1acc57369ff96015183e28$var$createClockMarker","deg","heightRatio","markerContainer","display","flexDirection","justifyContent","transform","marker","appendChild","container","getElementById","angle","currentMinute","hourHandle","minuteHandle","secondHandle","setInterval","hour","minute","second","time","Date","getHours","getMinutes","getSeconds","$8aad7887c0f66c51fcc23125f45161e4$export$a525df425a98f785","$8aad7887c0f66c51fcc23125f45161e4$export$5d77ebf4c55f86f0","$fe6805ae6a1acc57369ff96015183e28$var$main"],"version":3,"file":"index.98d149bc.js.map"}